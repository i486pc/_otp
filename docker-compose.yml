version: '3.8'

services:
  traefik:
    image: traefik:v2.5
    command:
      - "--api.insecure=true"
      - "--providers.docker=true"
      - "--entrypoints.web.address=:80"
    ports:
      - "80:80"
      - "8080:8080"
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock"
    networks:
      - web

  postgres:
    image: postgres:13
    environment:
      POSTGRES_USER: supabase_admin
      POSTGRES_PASSWORD: supabase_password
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - backend

  redis:
    image: redis:6
    networks:
      - backend

  minio:
    image: minio/minio
    command: server /data
    environment:
      MINIO_ACCESS_KEY: minio
      MINIO_SECRET_KEY: minio123
    volumes:
      - minio_data:/data
    ports:
      - "9000:9000"
    networks:
      - backend

  n8n:
    image: n8nio/n8n
    environment:
      DB_TYPE: postgresdb
      DB_POSTGRESDB_HOST: postgres
      DB_POSTGRESDB_PORT: 5432
      DB_POSTGRESDB_DATABASE: n8n
      DB_POSTGRESDB_USER: supabase_admin
      DB_POSTGRESDB_PASSWORD: supabase_password
    ports:
      - "5678:5678"
    networks:
      - backend

  portainer:
    image: portainer/portainer-ce
    command: -H unix:///var/run/docker.sock
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - portainer_data:/data
    ports:
      - "9000:9000"
    networks:
      - web

  supabase:
    image: supabase/postgres
    environment:
      POSTGRES_PASSWORD: supabase_password
    volumes:
      - supabase_data:/var/lib/postgresql/data
    networks:
      - backend

  otp-api:
    build:
      context: .
      dockerfile: Dockerfile
    environment:
      - NODE_ENV=production
      - PORT=3000
      - JWT_SECRET=${JWT_SECRET}
      - BASE_URL=${BASE_URL}
      - CLICKSEND_USERNAME=${CLICKSEND_USERNAME}
      - CLICKSEND_API_KEY=${CLICKSEND_API_KEY}
      - SMS_FROM_NUMBER=${SMS_FROM_NUMBER}
      - SMTP_HOST=${SMTP_HOST}
      - SMTP_PORT=${SMTP_PORT}
      - SMTP_SECURE=${SMTP_SECURE}
      - SMTP_USER=${SMTP_USER}
      - SMTP_PASS=${SMTP_PASS}
      - EMAIL_FROM=${EMAIL_FROM}
      - VAPI_API_KEY=${VAPI_API_KEY}
      - VAPI_ASSISTANT_ID=${VAPI_ASSISTANT_ID}
      - SUPABASE_URL=${SUPABASE_URL}
      - SUPABASE_KEY=${SUPABASE_KEY}
    ports:
      - "3000:3000"
    networks:
      - otp-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.otp-api.rule=Host(`otp.meudominio.com`)"
      - "traefik.http.routers.otp-api.entrypoints=web"
      - "traefik.http.services.otp-api.loadbalancer.server.port=3000"

  otp-worker:
    build:
      context: .
      dockerfile: Dockerfile.worker
    environment:
      - NODE_ENV=production
      - CLICKSEND_USERNAME=${CLICKSEND_USERNAME}
      - CLICKSEND_API_KEY=${CLICKSEND_API_KEY}
      - SMS_FROM_NUMBER=${SMS_FROM_NUMBER}
      - SMTP_HOST=${SMTP_HOST}
      - SMTP_PORT=${SMTP_PORT}
      - SMTP_SECURE=${SMTP_SECURE}
      - SMTP_USER=${SMTP_USER}
      - SMTP_PASS=${SMTP_PASS}
      - SMS_FROM_NUMBER=${SMS_FROM_NUMBER}
      - EMAIL_FROM=${EMAIL_FROM}
      - VAPI_API_KEY=${VAPI_API_KEY}
      - VAPI_ASSISTANT_ID=${VAPI_ASSISTANT_ID}
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure
    networks:
      - backend

networks:
  web:
    external: true
  backend:
    external: false
  otp-network:
    external: false

volumes:
  postgres_data:
  minio_data:
  portainer_data:
  supabase_data: